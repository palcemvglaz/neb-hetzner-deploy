import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seeding...')

  // Create admin user
  const adminPassword = await bcrypt.hash('password123', 12)
  const admin = await prisma.user.upsert({
    where: { email: 'admin@nebachiv.com' },
    update: {},
    create: {
      email: 'admin@nebachiv.com',
      name: 'Admin User',
      password: adminPassword,
      role: 'ADMIN',
      emailVerified: new Date(),
    },
  })

  console.log('‚úÖ Created admin user:', admin.email)

  // Create demo school
  const school = await prisma.school.upsert({
    where: { id: 'demo-school-id' },
    update: {},
    create: {
      id: 'demo-school-id',
      name: '–î–µ–º–æ –ú–æ—Ç–æ—à–∫–æ–ª–∞',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∞ –º–æ—Ç–æ—à–∫–æ–ª–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏',
      email: 'info@demo-motoshkola.com',
      phone: '+380671234567',
      address: '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –ö–∏—ó–≤'
    },
  })

  console.log('‚úÖ Created demo school:', school.name)

  // Create school admin
  const schoolAdminPassword = await bcrypt.hash('password123', 12)
  const schoolAdmin = await prisma.user.upsert({
    where: { email: 'school@nebachiv.com' },
    update: {},
    create: {
      email: 'school@nebachiv.com',
      name: 'School Admin',
      password: schoolAdminPassword,
      role: 'SCHOOL_ADMIN',
      schoolId: school.id,
      emailVerified: new Date(),
    },
  })

  console.log('‚úÖ Created school admin:', schoolAdmin.email)

  // Create demo student
  const studentPassword = await bcrypt.hash('password123', 12)
  const student = await prisma.user.upsert({
    where: { email: 'student@nebachiv.com' },
    update: {},
    create: {
      email: 'student@nebachiv.com',
      name: 'Demo Student',
      password: studentPassword,
      role: 'STUDENT',
      schoolId: school.id,
      emailVerified: new Date(),
    },
  })

  console.log('‚úÖ Created demo student:', student.email)

  // Create additional test users
  const testPassword = await bcrypt.hash('password123', 12)
  
  const student2 = await prisma.user.upsert({
    where: { email: 'student@test.com' },
    update: {},
    create: {
      email: 'student@test.com',
      name: 'Test Student',
      password: testPassword,
      role: 'STUDENT',
      schoolId: school.id,
      emailVerified: new Date(),
    },
  })
  console.log('‚úÖ Created test student:', student2.email)

  const instructor = await prisma.user.upsert({
    where: { email: 'instructor@test.com' },
    update: {},
    create: {
      email: 'instructor@test.com',
      name: 'Test Instructor',
      password: testPassword,
      role: 'INSTRUCTOR',
      emailVerified: new Date(),
    },
  })
  console.log('‚úÖ Created test instructor:', instructor.email)

  const schoolAdmin2 = await prisma.user.upsert({
    where: { email: 'school@test.com' },
    update: {},
    create: {
      email: 'school@test.com',
      name: 'Test Moto School',
      password: testPassword,
      role: 'SCHOOL_ADMIN',
      emailVerified: new Date(),
    },
  })
  console.log('‚úÖ Created test school admin:', schoolAdmin2.email)

  const admin2 = await prisma.user.upsert({
    where: { email: 'admin@test.com' },
    update: {},
    create: {
      email: 'admin@test.com',
      name: 'System Admin',
      password: testPassword,
      role: 'ADMIN',
      emailVerified: new Date(),
    },
  })
  console.log('‚úÖ Created test admin:', admin2.email)

  // Create demo tags
  const tags = await Promise.all([
    prisma.tag.upsert({
      where: { slug: 'bezpeka' },
      update: {},
      create: {
        slug: 'bezpeka',
        nameUa: '–ë–µ–∑–ø–µ–∫–∞',
        nameEn: 'Safety',
        nameRu: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'pdr' },
      update: {},
      create: {
        slug: 'pdr',
        nameUa: '–ü–î–†',
        nameEn: 'Traffic Rules',
        nameRu: '–ü–î–î',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'tekhnika-vodinnya' },
      update: {},
      create: {
        slug: 'tekhnika-vodinnya',
        nameUa: '–¢–µ—Ö–Ω—ñ–∫–∞ –≤–æ–¥—ñ–Ω–Ω—è',
        nameEn: 'Driving Technique',
        nameRu: '–¢–µ—Ö–Ω–∏–∫–∞ –≤–æ–∂–¥–µ–Ω–∏—è',
      },
    }),
  ])

  console.log('‚úÖ Created tags:', tags.map(tag => tag.nameUa).join(', '))

  // Create demo content
  const content = await prisma.content.create({
    data: {
      slug: 'osnovni-pravyla-bezpeki',
      type: 'GUIDE',
      status: 'PUBLISHED',
      isPublished: true,
      isPremium: false,
      difficulty: 'BEGINNER',
      estimatedTime: 15,
      order: 1,
      translations: {
        create: {
          language: 'UA',
          title: '–û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ',
          description: '–ë–∞–∑–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏, —è–∫—ñ –ø–æ–≤–∏–Ω–µ–Ω –∑–Ω–∞—Ç–∏ –∫–æ–∂–µ–Ω –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç',
          body: `# –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ

## –ï–∫—ñ–ø—ñ—Ä–æ–≤–∫–∞

1. **–®–æ–ª–æ–º** - –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –±–µ–∑–ø–µ–∫–∏
2. **–ó–∞—Ö–∏—Å–Ω–∏–π –æ–¥—è–≥** - –∫—É—Ä—Ç–∫–∞, —à—Ç–∞–Ω–∏, —Ä—É–∫–∞–≤–∏—á–∫–∏
3. **–í–∑—É—Ç—Ç—è** - –∑–∞–∫—Ä–∏—Ç–µ –≤–∑—É—Ç—Ç—è –∑ —Ç–≤–µ—Ä–¥–æ—é –ø—ñ–¥–æ—à–≤–æ—é

## –ü–µ—Ä–µ–¥ –ø–æ—ó–∑–¥–∫–æ—é

- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–∞–Ω –º–æ—Ç–æ—Ü–∏–∫–ª–∞
- –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —É —Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—ñ –≥–∞–ª—å–º
- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∏—Å–∫ —É —à–∏–Ω–∞—Ö

## –ù–∞ –¥–æ—Ä–æ–∑—ñ

- –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —à–≤–∏–¥–∫—ñ—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
- –¢—Ä–∏–º–∞–π—Ç–µ –±–µ–∑–ø–µ—á–Ω—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é
- –ë—É–¥—å—Ç–µ –ø–æ–º—ñ—Ç–Ω–∏–º–∏ –¥–ª—è —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä—É—Ö—É`,
          metaTitle: '–û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ | Nebachiv',
          metaDescription: '–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –ø—Ä–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç—ñ–≤. –ï–∫—ñ–ø—ñ—Ä–æ–≤–∫–∞, –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ø–æ—ó–∑–¥–∫–∏ —Ç–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –Ω–∞ –¥–æ—Ä–æ–∑—ñ.',
        },
      },
      tags: {
        create: [
          { tagId: tags[0].id }, // –ë–µ–∑–ø–µ–∫–∞
        ],
      },
    },
  })

  console.log('‚úÖ Created demo content:', content.slug)

  // Create demo test
  const test = await prisma.test.create({
    data: {
      contentId: content.id,
      title: '–¢–µ—Å—Ç –∑ –æ—Å–Ω–æ–≤ –±–µ–∑–ø–µ–∫–∏',
      description: '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ',
      passingScore: 80,
      timeLimit: 10,
      attemptsAllowed: 3,
      questions: {
        create: [
          {
            text: '–Ø–∫–∏–π –≥–æ–ª–æ–≤–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑–∞—Ö–∏—Å–Ω–æ—ó –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∏ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞?',
            type: 'SINGLE_CHOICE',
            points: 1,
            order: 1,
            explanation: '–®–æ–ª–æ–º –∑–∞—Ö–∏—â–∞—î –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—É —á–∞—Å—Ç–∏–Ω—É —Ç—ñ–ª–∞ - –≥–æ–ª–æ–≤—É',
            answers: {
              create: [
                { text: '–®–æ–ª–æ–º', isCorrect: true, order: 1 },
                { text: '–†—É–∫–∞–≤–∏—á–∫–∏', isCorrect: false, order: 2 },
                { text: '–ö—É—Ä—Ç–∫–∞', isCorrect: false, order: 3 },
                { text: '–ß–µ—Ä–µ–≤–∏–∫–∏', isCorrect: false, order: 4 },
              ],
            },
          },
          {
            text: '–Ø–∫—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é —Å–ª—ñ–¥ —Ç—Ä–∏–º–∞—Ç–∏ –∑–∞ —ñ–Ω—à–∏–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–º–∏ –∑–∞—Å–æ–±–∞–º–∏?',
            type: 'SINGLE_CHOICE',
            points: 1,
            order: 2,
            explanation: '–ë–µ–∑–ø–µ—á–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î –≤—á–∞—Å–Ω–æ –∑—Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∑–º—ñ–Ω—É —Å–∏—Ç—É–∞—Ü—ñ—ó',
            answers: {
              create: [
                { text: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω—É', isCorrect: false, order: 1 },
                { text: '–ë–µ–∑–ø–µ—á–Ω—É', isCorrect: true, order: 2 },
                { text: '–ë—É–¥—å-—è–∫—É', isCorrect: false, order: 3 },
                { text: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É', isCorrect: false, order: 4 },
              ],
            },
          },
        ],
      },
    },
  })

  console.log('‚úÖ Created demo test:', test.title)

  console.log('üéâ Database seeding completed!')
  console.log('\nüìã Demo accounts (all use password123):')
  console.log('Admin: admin@nebachiv.com / password123')
  console.log('Admin2: admin@test.com / password123')
  console.log('School: school@nebachiv.com / password123')
  console.log('School2: school@test.com / password123')
  console.log('Student: student@nebachiv.com / password123')
  console.log('Student2: student@test.com / password123')
  console.log('Instructor: instructor@test.com / password123')
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('‚ùå Error during seeding:', e)
    await prisma.$disconnect()
    process.exit(1)
  })