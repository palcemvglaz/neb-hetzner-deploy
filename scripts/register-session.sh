#!/bin/bash

# Claude Session Registration Script
# Usage: ./scripts/register-session.sh

set -e

echo "ü§ñ Claude Session Registration"
echo "=============================="
echo ""

# Check if docs/session-logs directory exists
mkdir -p docs/session-logs

# Session Type Selection
echo "üìã –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–µ—Å—ñ—ó:"
echo "1) AGENT    - Backend agents, API, business logic"
echo "2) FRONTEND - UI components, pages, styling"  
echo "3) CONTENT  - KB_NEB integration, documentation"
echo "4) ARCH     - Architecture, coordination, database"
echo ""

read -p "–¢–∏–ø —Å–µ—Å—ñ—ó (1-4): " SESSION_TYPE_NUM

case $SESSION_TYPE_NUM in
    1) SESSION_TYPE="AGENT" ;;
    2) SESSION_TYPE="FRONTEND" ;;
    3) SESSION_TYPE="CONTENT" ;;
    4) SESSION_TYPE="ARCH" ;;
    *) echo "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä"; exit 1 ;;
esac

# Generate Session ID
TIMESTAMP=$(date +%Y%m%d-%H%M)
SESSION_ID="${SESSION_TYPE}-${TIMESTAMP}"

echo ""
echo "üÜî Session ID: $SESSION_ID"

# Duration
echo ""
echo "‚è±Ô∏è –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:"
echo "1) Quick (< 1 hour)"
echo "2) Session (1-4 hours)"
echo "3) Extended (> 4 hours)"
echo ""

read -p "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (1-3): " DURATION_NUM

case $DURATION_NUM in
    1) DURATION="quick" ;;
    2) DURATION="session" ;;
    3) DURATION="extended" ;;
    *) echo "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä"; exit 1 ;;
esac

# Scope Selection
echo ""
echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ (–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è $SESSION_TYPE):"

case $SESSION_TYPE in
    "AGENT")
        echo "1) /lib/agents/"
        echo "2) /app/api/"
        echo "3) /lib/services/"
        echo "4) Tests for agents"
        ;;
    "FRONTEND")
        echo "1) /components/ui/"
        echo "2) /components/shared/"
        echo "3) /app/(pages)/"
        echo "4) Styling files"
        ;;
    "CONTENT")
        echo "1) /docs/"
        echo "2) KB_NEB integration"
        echo "3) Content management"
        echo "4) Documentation updates"
        ;;
    "ARCH")
        echo "1) /prisma/"
        echo "2) Project structure"
        echo "3) Configuration files"
        echo "4) Cross-cutting concerns"
        ;;
esac

echo ""
read -p "–û—Å–Ω–æ–≤–Ω–∞ —Ä–æ–±–æ—Ç–∞ –±—É–¥–µ –≤ (–Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É): " SCOPE_INPUT

# Convert scope to directories
declare -a SCOPE_DIRS
case $SESSION_TYPE in
    "AGENT")
        IFS=',' read -ra NUMS <<< "$SCOPE_INPUT"
        for num in "${NUMS[@]}"; do
            case $num in
                1) SCOPE_DIRS+=("/lib/agents/") ;;
                2) SCOPE_DIRS+=("/app/api/") ;;
                3) SCOPE_DIRS+=("/lib/services/") ;;
                4) SCOPE_DIRS+=("/__tests__/agents/") ;;
            esac
        done
        ;;
    "FRONTEND")
        IFS=',' read -ra NUMS <<< "$SCOPE_INPUT"
        for num in "${NUMS[@]}"; do
            case $num in
                1) SCOPE_DIRS+=("/components/ui/") ;;
                2) SCOPE_DIRS+=("/components/shared/") ;;
                3) SCOPE_DIRS+=("/app/(pages)/") ;;
                4) SCOPE_DIRS+=("/styles/") ;;
            esac
        done
        ;;
    "CONTENT")
        IFS=',' read -ra NUMS <<< "$SCOPE_INPUT"
        for num in "${NUMS[@]}"; do
            case $num in
                1) SCOPE_DIRS+=("/docs/") ;;
                2) SCOPE_DIRS+=("/lib/kb-neb/") ;;
                3) SCOPE_DIRS+=("/content/") ;;
                4) SCOPE_DIRS+=("/docs/") ;;
            esac
        done
        ;;
    "ARCH")
        IFS=',' read -ra NUMS <<< "$SCOPE_INPUT"
        for num in "${NUMS[@]}"; do
            case $num in
                1) SCOPE_DIRS+=("/prisma/") ;;
                2) SCOPE_DIRS+=("/") ;;
                3) SCOPE_DIRS+=("/config/") ;;
                4) SCOPE_DIRS+=("/lib/") ;;
            esac
        done
        ;;
esac

# Goals
echo ""
read -p "üéØ –û—Å–Ω–æ–≤–Ω–∞ —Ü—ñ–ª—å —Å–µ—Å—ñ—ó: " MAIN_GOAL

# Dependencies
echo ""
echo "üîó –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —ñ–Ω—à–∏—Ö —Å–µ—Å—ñ–π:"
echo "1) –ù–µ–∑–∞–ª–µ–∂–Ω–∞ —Ä–æ–±–æ—Ç–∞"
echo "2) –ü–æ—Ç—Ä–µ–±—É—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó"
echo "3) –ë–ª–æ–∫—É—î —ñ–Ω—à—ñ —Å–µ—Å—ñ—ó"
echo ""

read -p "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (1-3): " DEPENDENCY_NUM

case $DEPENDENCY_NUM in
    1) DEPENDENCIES="independent" ;;
    2) DEPENDENCIES="coordination_needed" ;;
    3) DEPENDENCIES="blocking" ;;
    *) echo "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä"; exit 1 ;;
esac

# Check for active sessions
echo ""
echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π..."

if [ -f "docs/session-logs/current-sessions.json" ]; then
    echo "üìã –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó:"
    cat docs/session-logs/current-sessions.json | grep -o '"sessionId":"[^"]*"' | sed 's/"sessionId":"//g' | sed 's/"//g' || echo "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π"
else
    echo "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π"
    echo "[]" > docs/session-logs/current-sessions.json
fi

# Generate branch name
BRANCH_NAME="feature/${SESSION_TYPE,,}-$(date +%m%d-%H%M)"

echo ""
echo "üåø Git branch: $BRANCH_NAME"

# Conflict check
echo ""
echo "‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤..."

CONFLICT_LEVEL="LOW"
if [ -f "docs/session-logs/current-sessions.json" ]; then
    # Check if any active session works with same directories
    for dir in "${SCOPE_DIRS[@]}"; do
        if grep -q "$dir" docs/session-logs/current-sessions.json 2>/dev/null; then
            CONFLICT_LEVEL="HIGH"
            echo "üî¥ –ö–û–ù–§–õ–Ü–ö–¢: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è $dir –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è"
        fi
    done
fi

echo "üìä –†—ñ–≤–µ–Ω—å –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤: $CONFLICT_LEVEL"

# Confirmation
echo ""
echo "üìã –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:"
echo "   Session ID: $SESSION_ID"
echo "   Type: $SESSION_TYPE"
echo "   Duration: $DURATION"
echo "   Goal: $MAIN_GOAL"
echo "   Scope: ${SCOPE_DIRS[*]}"
echo "   Branch: $BRANCH_NAME"
echo "   Conflicts: $CONFLICT_LEVEL"
echo ""

read -p "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é? (y/N): " CONFIRM

if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
    exit 1
fi

# Create session record
CURRENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

# Read existing sessions
if [ -f "docs/session-logs/current-sessions.json" ]; then
    EXISTING_SESSIONS=$(cat docs/session-logs/current-sessions.json)
else
    EXISTING_SESSIONS="[]"
fi

# Create new session object
NEW_SESSION=$(cat <<EOF
{
  "sessionId": "$SESSION_ID",
  "type": "$SESSION_TYPE",
  "startTime": "$CURRENT_TIME",
  "duration": "$DURATION",
  "goal": "$MAIN_GOAL",
  "scope": [$(printf '"%s",' "${SCOPE_DIRS[@]}" | sed 's/,$//')],,
  "branch": "$BRANCH_NAME",
  "status": "active",
  "conflictLevel": "$CONFLICT_LEVEL",
  "dependencies": "$DEPENDENCIES",
  "lastUpdate": "$CURRENT_TIME"
}
EOF
)

# Add to sessions array
UPDATED_SESSIONS=$(echo "$EXISTING_SESSIONS" | jq ". + [$NEW_SESSION]")
echo "$UPDATED_SESSIONS" > docs/session-logs/current-sessions.json

# Create git branch
echo ""
echo "üåø –°—Ç–≤–æ—Ä–µ–Ω–Ω—è git branch..."
git checkout -b "$BRANCH_NAME" 2>/dev/null || {
    echo "‚ö†Ô∏è Branch –≤–∂–µ —ñ—Å–Ω—É—î, –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ –Ω—å–æ–≥–æ"
    git checkout "$BRANCH_NAME"
}

# Create session workspace
echo ""
echo "üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è workspace..."

mkdir -p "docs/session-logs/sessions/$SESSION_ID"

# Create session notes file
cat > "docs/session-logs/sessions/$SESSION_ID/notes.md" <<EOF
# $SESSION_TYPE Session: $SESSION_ID

## Session Info
- **Started**: $CURRENT_TIME
- **Duration**: $DURATION  
- **Goal**: $MAIN_GOAL
- **Branch**: $BRANCH_NAME
- **Conflict Level**: $CONFLICT_LEVEL

## Scope
$(printf '- %s\n' "${SCOPE_DIRS[@]}")

## Progress
- [ ] Session setup complete
- [ ] Initial analysis done
- [ ] Development started
- [ ] Testing completed
- [ ] Documentation updated
- [ ] Ready for merge

## Notes
Add your session notes here...

## Coordination
Record any coordination with other sessions here...

## Files Modified
Track modified files here...
EOF

# Create session status file
cat > "docs/session-logs/sessions/$SESSION_ID/status.json" <<EOF
{
  "sessionId": "$SESSION_ID",
  "currentTask": "Session initialization",
  "filesModified": [],
  "estimatedCompletion": null,
  "blockedBy": [],
  "blocking": [],
  "needsCoordination": []
}
EOF

# Update CLAUDE.md with session info
echo "" >> CLAUDE.md
echo "## Active Claude Session: $SESSION_ID" >> CLAUDE.md
echo "- **Type**: $SESSION_TYPE" >> CLAUDE.md
echo "- **Goal**: $MAIN_GOAL" >> CLAUDE.md
echo "- **Branch**: $BRANCH_NAME" >> CLAUDE.md
echo "- **Started**: $CURRENT_TIME" >> CLAUDE.md
echo "" >> CLAUDE.md

# Success message
echo ""
echo "‚úÖ –°–µ—Å—ñ—é $SESSION_ID —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!"
echo ""
echo "üìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:"
echo "1. –ü–æ—á–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É –≤ —Å–≤–æ—î–º—É scope: ${SCOPE_DIRS[*]}"
echo "2. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–π—Ç–µ —Å—Ç–∞—Ç—É—Å: ./scripts/update-session-status.sh"
echo "3. –ö–æ–æ—Ä–¥–∏–Ω—É–π—Ç–µ—Å—è –∑ —ñ–Ω—à–∏–º–∏ —Å–µ—Å—ñ—è–º–∏ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ"
echo "4. –ö–æ–º—ñ—Ç—å—Ç–µ –∑–º—ñ–Ω–∏ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º [$SESSION_TYPE]"
echo "5. –û–Ω–æ–≤–ª—é–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –≤ docs/session-logs/sessions/$SESSION_ID/"
echo ""
echo "üìñ –ü–æ–≤–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: docs/CLAUDE_SESSION_MANAGEMENT.md"
echo ""

# Final reminders based on conflict level
if [ "$CONFLICT_LEVEL" = "HIGH" ]; then
    echo "‚ö†Ô∏è  –£–í–ê–ì–ê: –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤!"
    echo "   –û–±–æ–≤'—è–∑–∫–æ–≤–æ –∫–æ–æ—Ä–¥–∏–Ω—É–π—Ç–µ—Å—è –∑ —ñ–Ω—à–∏–º–∏ —Å–µ—Å—ñ—è–º–∏ –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–∞–º–∏"
    echo ""
fi

echo "üöÄ –ë–∞–∂–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏!"