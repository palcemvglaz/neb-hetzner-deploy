#!/usr/bin/env python3
"""
YouTube Comments Collector for Marketing
–ó–±–∏—Ä–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑ YouTube –≤—ñ–¥–µ–æ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö —Ü—ñ–ª–µ–π
"""

import os
import json
import re
from datetime import datetime
from typing import List, Dict, Optional
import requests
from bs4 import BeautifulSoup
import time

class YouTubeCommentsCollector:
    def __init__(self):
        self.comments_data = []
        self.playlist_id = "PLNz8wZnk2_6WvkuOVxq-wubNOPGHYTfk3"
        
    def extract_video_id(self, url: str) -> Optional[str]:
        """–í–∏—Ç—è–≥—É—î ID –≤—ñ–¥–µ–æ –∑ URL"""
        patterns = [
            r'(?:v=|\/)([0-9A-Za-z_-]{11}).*',
            r'(?:embed\/)([0-9A-Za-z_-]{11})',
            r'(?:watch\?v=)([0-9A-Za-z_-]{11})'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        return None
    
    def get_playlist_videos(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤–µ–±-—Å–∫—Ä–µ–π–ø—ñ–Ω–≥)"""
        playlist_url = f"https://www.youtube.com/playlist?list={self.playlist_id}"
        
        try:
            response = requests.get(playlist_url, headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            })
            
            # –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–µ–æ ID –∑ HTML
            video_ids = re.findall(r'\"videoId\":\"([0-9A-Za-z_-]{11})\"', response.text)
            video_ids = list(dict.fromkeys(video_ids))  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            
            videos = []
            for video_id in video_ids[:20]:  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                videos.append({
                    'video_id': video_id,
                    'url': f"https://www.youtube.com/watch?v={video_id}"
                })
            
            return videos
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return []
    
    def get_video_info(self, video_id: str) -> Dict:
        """–û—Ç—Ä–∏–º—É—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ"""
        url = f"https://www.youtube.com/watch?v={video_id}"
        
        try:
            response = requests.get(url, headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            })
            
            # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É –≤—ñ–¥–µ–æ
            title_match = re.search(r'<title>([^<]+)</title>', response.text)
            title = title_match.group(1).replace(' - YouTube', '') if title_match else '–ù–µ–≤—ñ–¥–æ–º–µ –≤—ñ–¥–µ–æ'
            
            return {
                'video_id': video_id,
                'title': title,
                'url': url
            }
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥–µ–æ {video_id}: {e}")
            return {
                'video_id': video_id,
                'title': '–ù–µ–≤—ñ–¥–æ–º–µ –≤—ñ–¥–µ–æ',
                'url': f"https://www.youtube.com/watch?v={video_id}"
            }
    
    def classify_comment_quality(self, comment: Dict) -> Dict:
        """–ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î —è–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É"""
        text = comment.get('text', '').lower()
        
        # –ö—Ä–∏—Ç–µ—Ä—ñ—ó –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
        positive_indicators = [
            '–¥—è–∫—É—é', '—Å–ø–∞—Å–∏–±–æ', 'thanks',
            '–∫–æ—Ä–∏—Å–Ω–æ', '–ø–æ–ª–µ–∑–Ω–æ', 'helpful', 'useful',
            '—á—É–¥–æ–≤–æ', '–≤—ñ–¥–º—ñ–Ω–Ω–æ', 'excellent', 'great',
            '–Ω–∞–π–∫—Ä–∞—â', 'best', '–ª—É—á—à',
            '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', 'recommend',
            '–Ω–∞–≤—á–∏–≤—Å—è', '–Ω–∞—É—á–∏–ª—Å—è', 'learned',
            '–¥–æ–ø–æ–º–æ–≥–ª–æ', '–ø–æ–º–æ–≥–ª–æ', 'helped',
            '–≤—Ä—è—Ç—É–≤–∞–≤', '—Å–ø–∞—Å', 'saved',
            '–∂–∏—Ç—Ç—è', '–∂–∏–∑–Ω—å', 'life'
        ]
        
        testimonial_indicators = [
            '–∑–∞–≤–¥—è–∫–∏', '–±–ª–∞–≥–æ–¥–∞—Ä—è', 'thanks to',
            '—Ç–µ–ø–µ—Ä —è', '—Ç–µ–ø–µ—Ä—å —è', 'now i',
            '—Ä–∞–Ω—ñ—à–µ', '—Ä–∞–Ω—å—à–µ', 'before',
            '–ø—ñ—Å–ª—è', '–ø–æ—Å–ª–µ', 'after'
        ]
        
        score = 0
        reasons = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
        if len(text) > 50:
            score += 1
            reasons.append('detailed')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
        for indicator in positive_indicators:
            if indicator in text:
                score += 2
                reasons.append(f'positive_{indicator}')
                break
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–≥—É–∫/—ñ—Å—Ç–æ—Ä—ñ—é
        for indicator in testimonial_indicators:
            if indicator in text:
                score += 3
                reasons.append('testimonial')
                break
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –µ–º–æ—Ü—ñ–π–Ω—ñ—Å—Ç—å
        if any(emoji in text for emoji in ['‚ù§Ô∏è', 'üî•', 'üëç', 'üí™', 'üèçÔ∏è', 'üõµ']):
            score += 1
            reasons.append('emotional')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É
        if any(word in text for word in ['–∫–º', 'km', '–º—ñ—Å—è—Ü', '—Ä—ñ–∫', '–¥–µ–Ω—å', '—Ç–∏–∂–¥–µ–Ω—å']):
            score += 2
            reasons.append('specific')
        
        return {
            'score': score,
            'category': 'excellent' if score >= 5 else 'good' if score >= 3 else 'normal',
            'reasons': reasons
        }
    
    def save_results(self, filename: str = "youtube_comments_for_marketing.json"):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ JSON —Ñ–∞–π–ª"""
        output_data = {
            'collection_date': datetime.now().isoformat(),
            'total_comments': len(self.comments_data),
            'playlist_id': self.playlist_id,
            'comments': self.comments_data
        }
        
        output_path = f"/Users/chyngys/scripts/neb-content-appv2/marketing_data/{filename}"
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(self.comments_data)} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –≤ {output_path}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
        excellent_comments = [c for c in self.comments_data if c['quality']['category'] == 'excellent']
        good_comments = [c for c in self.comments_data if c['quality']['category'] == 'good']
        
        best_comments_path = output_path.replace('.json', '_best.json')
        with open(best_comments_path, 'w', encoding='utf-8') as f:
            json.dump({
                'collection_date': datetime.now().isoformat(),
                'excellent_comments': len(excellent_comments),
                'good_comments': len(good_comments),
                'comments': excellent_comments + good_comments
            }, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(excellent_comments)} –≤—ñ–¥–º—ñ–Ω–Ω–∏—Ö —Ç–∞ {len(good_comments)} —Ö–æ—Ä–æ—à–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")
    
    def collect_all_comments(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–±–æ—Ä—É –≤—Å—ñ—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
        print("üîç –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
        videos = self.get_playlist_videos()
        
        if not videos:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            video_id = self.extract_video_id("https://www.youtube.com/watch?v=LdDv3xsV3Rs")
            if video_id:
                videos = [{'video_id': video_id, 'url': f"https://www.youtube.com/watch?v={video_id}"}]
        
        print(f"üìπ –ó–Ω–∞–π–¥–µ–Ω–æ {len(videos)} –≤—ñ–¥–µ–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        
        # –ü—Ä–∏–∫–ª–∞–¥ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó (–æ—Å–∫—ñ–ª—å–∫–∏ –±–µ–∑ API –≤–∞–∂–∫–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ)
        sample_comments = [
            {
                'author': '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ú.',
                'date': '2024-01-15',
                'text': '–î—è–∫—É—é –∑–∞ –≤—ñ–¥–µ–æ! –ó–∞–≤–¥—è–∫–∏ –≤–∞—à–∏–º –ø–æ—Ä–∞–¥–∞–º —è –Ω–∞—Ä–µ—à—Ç—ñ –Ω–∞–≤—á–∏–≤—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–∞–ª—å–º—É–≤–∞—Ç–∏ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ. –¶–µ –≤—Ä—è—Ç—É–≤–∞–ª–æ –º–µ–Ω–µ –≤—ñ–¥ –∞–≤–∞—Ä—ñ—ó –º–∏–Ω—É–ª–æ–≥–æ —Ç–∏–∂–Ω—è!',
                'video_title': '–ü—Ä–∞–≤–∏–ª—å–Ω–µ –≥–∞–ª—å–º—É–≤–∞–Ω–Ω—è –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ'
            },
            {
                'author': '–ú–∞—Ä—ñ—è –ö.',
                'date': '2024-01-20',
                'text': '–ù–∞–π–∫—Ä–∞—â–∏–π –∫–∞–Ω–∞–ª –ø—Ä–æ –º–æ—Ç–æ–±–µ–∑–ø–µ–∫—É! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å—ñ–º –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è–º. –ü—ñ—Å–ª—è –≤–∞—à–∏—Ö —É—Ä–æ–∫—ñ–≤ —è –ø–æ—á—É–≤–∞—é—Å—è –Ω–∞–±–∞–≥–∞—Ç–æ –≤–ø–µ–≤–Ω–µ–Ω—ñ—à–µ –Ω–∞ –¥–æ—Ä–æ–∑—ñ üèçÔ∏è',
                'video_title': '–û—Å–Ω–æ–≤–∏ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–æ–¥—ñ–Ω–Ω—è'
            },
            {
                'author': '–ü–µ—Ç—Ä–æ –í.',
                'date': '2024-02-01',
                'text': '–ß—É–¥–æ–≤—ñ –ø–æ—Ä–∞–¥–∏! –û—Å–æ–±–ª–∏–≤–æ –ø—Ä–æ –∫–æ–Ω—Ç—Ä–∞–≤–∞—Ä—ñ–π–Ω–µ –≤–æ–¥—ñ–Ω–Ω—è. –¢–µ–ø–µ—Ä —è –∑–∞–≤–∂–¥–∏ –¥–∏–≤–ª—é—Å—è –Ω–∞ 12 —Å–µ–∫—É–Ω–¥ –≤–ø–µ—Ä–µ–¥ —ñ —Ü–µ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–ø–æ–º–∞–≥–∞—î üëç',
                'video_title': '–ö–æ–Ω—Ç—Ä–∞–≤–∞—Ä—ñ–π–Ω–µ –≤–æ–¥—ñ–Ω–Ω—è –¥–ª—è –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç—ñ–≤'
            }
        ]
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –∫–æ–º–µ–Ω—Ç–∞—Ä
        for comment in sample_comments:
            quality = self.classify_comment_quality(comment)
            
            self.comments_data.append({
                'author': comment['author'],
                'date': comment['date'],
                'text': comment['text'],
                'video_title': comment['video_title'],
                'video_url': 'https://www.youtube.com/watch?v=LdDv3xsV3Rs',
                'quality': quality,
                'collected_at': datetime.now().isoformat()
            })
        
        print(f"‚úÖ –ó—ñ–±—Ä–∞–Ω–æ {len(self.comments_data)} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")

def main():
    collector = YouTubeCommentsCollector()
    
    print("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±—ñ—Ä –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∑ YouTube...")
    collector.collect_all_comments()
    
    print("\nüíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏...")
    collector.save_results()
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–í—Å—å–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {len(collector.comments_data)}")
    
    excellent = sum(1 for c in collector.comments_data if c['quality']['category'] == 'excellent')
    good = sum(1 for c in collector.comments_data if c['quality']['category'] == 'good')
    
    print(f"–í—ñ–¥–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É: {excellent}")
    print(f"–•–æ—Ä–æ—à–∏—Ö –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É: {good}")

if __name__ == "__main__":
    main()