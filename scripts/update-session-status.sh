#!/bin/bash

# Claude Session Status Update Script
# Usage: ./scripts/update-session-status.sh [SESSION_ID] [STATUS]

set -e

SESSION_ID="$1"
NEW_STATUS="$2"

if [ -z "$SESSION_ID" ]; then
    echo "üìã –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó:"
    if [ -f "docs/session-logs/current-sessions.json" ]; then
        cat docs/session-logs/current-sessions.json | jq -r '.[] | "üÜî \(.sessionId) - \(.type) - \(.status)"'
    else
        echo "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π"
    fi
    echo ""
    read -p "üÜî Session ID: " SESSION_ID
fi

if [ -z "$NEW_STATUS" ]; then
    echo ""
    echo "üìä –î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏:"
    echo "1) working     - –ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∞—Ü—é—é"
    echo "2) blocked     - –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π"
    echo "3) waiting     - –û—á—ñ–∫—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó"
    echo "4) testing     - –¢–µ—Å—Ç—É—é –∑–º—ñ–Ω–∏"
    echo "5) documenting - –û–Ω–æ–≤–ª—é—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é"
    echo "6) completed   - –ó–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É"
    echo "7) paused      - –ü–∞—É–∑–∞"
    echo ""
    read -p "–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å (1-7): " STATUS_NUM
    
    case $STATUS_NUM in
        1) NEW_STATUS="working" ;;
        2) NEW_STATUS="blocked" ;;
        3) NEW_STATUS="waiting" ;;
        4) NEW_STATUS="testing" ;;
        5) NEW_STATUS="documenting" ;;
        6) NEW_STATUS="completed" ;;
        7) NEW_STATUS="paused" ;;
        *) echo "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä"; exit 1 ;;
    esac
fi

# Check if sessions file exists
if [ ! -f "docs/session-logs/current-sessions.json" ]; then
    echo "‚ùå –§–∞–π–ª —Å–µ—Å—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    exit 1
fi

# Check if session exists
if ! jq -e ".[] | select(.sessionId == \"$SESSION_ID\")" docs/session-logs/current-sessions.json > /dev/null; then
    echo "‚ùå –°–µ—Å—ñ—é $SESSION_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    exit 1
fi

# Get current task
echo ""
read -p "üìù –ü–æ—Ç–æ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: " CURRENT_TASK

# Get files being modified
echo ""
read -p "üìÅ –§–∞–π–ª–∏ —è–∫—ñ –∑–º—ñ–Ω—é—é—Ç—å—Å—è (—á–µ—Ä–µ–∑ –∫–æ–º—É): " FILES_INPUT

# Convert files to array
if [ -n "$FILES_INPUT" ]; then
    IFS=',' read -ra FILES_ARRAY <<< "$FILES_INPUT"
    FILES_JSON=$(printf '"%s",' "${FILES_ARRAY[@]}" | sed 's/,$//; s/^/[/; s/$/]/')
else
    FILES_JSON="[]"
fi

# Estimated completion
if [ "$NEW_STATUS" = "working" ] || [ "$NEW_STATUS" = "testing" ]; then
    echo ""
    echo "‚è±Ô∏è –û—á—ñ–∫—É–≤–∞–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:"
    echo "1) 30 —Ö–≤–∏–ª–∏–Ω"
    echo "2) 1 –≥–æ–¥–∏–Ω–∞"
    echo "3) 2-3 –≥–æ–¥–∏–Ω–∏"
    echo "4) –°—å–æ–≥–æ–¥–Ω—ñ"
    echo "5) –ó–∞–≤—Ç—Ä–∞"
    echo ""
    read -p "ETA (1-5): " ETA_NUM
    
    case $ETA_NUM in
        1) ETA_MINUTES=30 ;;
        2) ETA_MINUTES=60 ;;
        3) ETA_MINUTES=180 ;;
        4) ETA_MINUTES=480 ;;
        5) ETA_MINUTES=1440 ;;
        *) ETA_MINUTES=60 ;;
    esac
    
    ETA_TIME=$(date -u -d "+${ETA_MINUTES} minutes" +%Y-%m-%dT%H:%M:%SZ)
else
    ETA_TIME="null"
fi

# Coordination needs
echo ""
read -p "ü§ù –ü–æ—Ç—Ä–µ–±—É—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó –∑ (session IDs —á–µ—Ä–µ–∑ –∫–æ–º—É, –∞–±–æ Enter): " COORDINATION_INPUT

if [ -n "$COORDINATION_INPUT" ]; then
    IFS=',' read -ra COORD_ARRAY <<< "$COORDINATION_INPUT"
    COORD_JSON=$(printf '"%s",' "${COORD_ARRAY[@]}" | sed 's/,$//; s/^/[/; s/$/]/')
else
    COORD_JSON="[]"
fi

# Current timestamp
CURRENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

# Update session in current-sessions.json
UPDATED_SESSIONS=$(jq --arg sessionId "$SESSION_ID" \
                     --arg status "$NEW_STATUS" \
                     --arg task "$CURRENT_TASK" \
                     --argjson files "$FILES_JSON" \
                     --arg eta "$ETA_TIME" \
                     --argjson coord "$COORD_JSON" \
                     --arg time "$CURRENT_TIME" \
                     'map(if .sessionId == $sessionId then 
                        .status = $status | 
                        .currentTask = $task | 
                        .filesModified = $files | 
                        .estimatedCompletion = $eta | 
                        .needsCoordination = $coord | 
                        .lastUpdate = $time 
                      else . end)' \
                   docs/session-logs/current-sessions.json)

echo "$UPDATED_SESSIONS" > docs/session-logs/current-sessions.json

# Update individual session status
SESSION_DIR="docs/session-logs/sessions/$SESSION_ID"
if [ -f "$SESSION_DIR/status.json" ]; then
    UPDATED_STATUS=$(jq --arg sessionId "$SESSION_ID" \
                       --arg task "$CURRENT_TASK" \
                       --argjson files "$FILES_JSON" \
                       --arg eta "$ETA_TIME" \
                       --argjson coord "$COORD_JSON" \
                       '.currentTask = $task | 
                        .filesModified = $files | 
                        .estimatedCompletion = $eta | 
                        .needsCoordination = $coord' \
                     "$SESSION_DIR/status.json")
    
    echo "$UPDATED_STATUS" > "$SESSION_DIR/status.json"
fi

# Add to session notes
if [ -f "$SESSION_DIR/notes.md" ]; then
    echo "" >> "$SESSION_DIR/notes.md"
    echo "### Update: $CURRENT_TIME" >> "$SESSION_DIR/notes.md"
    echo "- **Status**: $NEW_STATUS" >> "$SESSION_DIR/notes.md"
    echo "- **Task**: $CURRENT_TASK" >> "$SESSION_DIR/notes.md"
    if [ "$ETA_TIME" != "null" ]; then
        echo "- **ETA**: $ETA_TIME" >> "$SESSION_DIR/notes.md"
    fi
    echo "" >> "$SESSION_DIR/notes.md"
fi

# Show status summary
echo ""
echo "‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó $SESSION_ID –æ–Ω–æ–≤–ª–µ–Ω–æ!"
echo ""
echo "üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:"
echo "   Status: $NEW_STATUS"
echo "   Task: $CURRENT_TASK"
if [ "$ETA_TIME" != "null" ]; then
    echo "   ETA: $ETA_TIME"
fi
echo "   Files: $FILES_JSON"
if [ "$COORD_JSON" != "[]" ]; then
    echo "   Coordination: $COORD_JSON"
fi

# Check for coordination alerts
if [ "$COORD_JSON" != "[]" ]; then
    echo ""
    echo "üîî –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –∑ —ñ–Ω—à–∏–º–∏ —Å–µ—Å—ñ—è–º–∏!"
    echo "   –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ active sessions —Ç–∞ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∏–º–∏"
fi

# Notify if session is blocked
if [ "$NEW_STATUS" = "blocked" ]; then
    echo ""
    echo "‚ö†Ô∏è  –°–µ—Å—ñ—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞!"
    echo "   –û–Ω–æ–≤—ñ—Ç—å –±–ª–æ–∫—É—é—á—ñ —Ñ–∞–∫—Ç–æ—Ä–∏ –≤ session notes"
fi

# Show other active sessions if coordination needed
if [ "$COORD_JSON" != "[]" ] || [ "$NEW_STATUS" = "waiting" ]; then
    echo ""
    echo "üë• –Ü–Ω—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó:"
    jq -r '.[] | select(.sessionId != "'$SESSION_ID'") | "   üÜî \(.sessionId) - \(.type) - \(.status) - \(.currentTask)"' docs/session-logs/current-sessions.json
fi

echo ""