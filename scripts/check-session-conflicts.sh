#!/bin/bash

# Claude Session Conflict Checker
# Usage: ./scripts/check-session-conflicts.sh [FILE_PATH]

set -e

FILE_PATH="$1"

echo "üîç Claude Session Conflict Checker"
echo "=================================="
echo ""

# Check if sessions file exists
if [ ! -f "docs/session-logs/current-sessions.json" ]; then
    echo "üìã –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π"
    exit 0
fi

# Show active sessions
echo "üë• –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó:"
jq -r '.[] | "üÜî \(.sessionId) - \(.type) - \(.status) - Last: \(.lastUpdate)"' docs/session-logs/current-sessions.json
echo ""

# If specific file provided, check conflicts for that file
if [ -n "$FILE_PATH" ]; then
    echo "üìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –¥–ª—è: $FILE_PATH"
    echo ""
    
    # Find sessions that might conflict
    CONFLICTS=$(jq -r --arg file "$FILE_PATH" '.[] | select(.scope[] | contains($file) or $file | contains(.)) | .sessionId' docs/session-logs/current-sessions.json)
    
    if [ -z "$CONFLICTS" ]; then
        echo "‚úÖ –ö–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è $FILE_PATH"
    else
        echo "‚ö†Ô∏è  –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏:"
        echo "$CONFLICTS" | while read session; do
            echo "   üî¥ $session"
        done
        echo ""
        echo "ü§ù –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–∞–º–∏"
    fi
    exit 0
fi

# General conflict analysis
echo "üîç –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –º—ñ–∂ —Å–µ—Å—ñ—è–º–∏:"
echo ""

# Check for overlapping scopes
jq -r '.[] | {sessionId, scope}' docs/session-logs/current-sessions.json | \
while IFS= read -r session_data; do
    SESSION_ID=$(echo "$session_data" | jq -r '.sessionId')
    SCOPE=$(echo "$session_data" | jq -r '.scope[]')
    
    echo "üÜî $SESSION_ID:"
    echo "$SCOPE" | while read dir; do
        echo "   üìÅ $dir"
        
        # Check if other sessions have overlapping scope
        OTHER_SESSIONS=$(jq -r --arg currentId "$SESSION_ID" --arg dir "$dir" \
            '.[] | select(.sessionId != $currentId and (.scope[] | contains($dir) or $dir | contains(.))) | .sessionId' \
            docs/session-logs/current-sessions.json)
        
        if [ -n "$OTHER_SESSIONS" ]; then
            echo "$OTHER_SESSIONS" | while read other; do
                echo "      ‚ö†Ô∏è  Overlap with $other"
            done
        fi
    done
    echo ""
done

# Check for coordination needs
echo "ü§ù –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è:"
COORD_NEEDED=$(jq -r '.[] | select(.needsCoordination | length > 0) | {sessionId, needsCoordination}' docs/session-logs/current-sessions.json)

if [ -z "$COORD_NEEDED" ]; then
    echo "‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞"
else
    echo "$COORD_NEEDED" | jq -r '"üÜî \(.sessionId) needs coordination with: \(.needsCoordination | join(", "))"'
fi

echo ""

# Check for blocked sessions
echo "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Å–µ—Å—ñ—ó:"
BLOCKED=$(jq -r '.[] | select(.status == "blocked" or .status == "waiting") | .sessionId' docs/session-logs/current-sessions.json)

if [ -z "$BLOCKED" ]; then
    echo "‚úÖ –ù–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö —Å–µ—Å—ñ–π"
else
    echo "$BLOCKED" | while read session; do
        echo "   üî¥ $session"
        TASK=$(jq -r --arg id "$session" '.[] | select(.sessionId == $id) | .currentTask' docs/session-logs/current-sessions.json)
        echo "      Task: $TASK"
    done
fi

echo ""

# Git branch conflicts
echo "üåø Git branch –∞–Ω–∞–ª—ñ–∑:"
CURRENT_BRANCH=$(git branch --show-current)
echo "   Current branch: $CURRENT_BRANCH"

# Show all session branches
echo "   Session branches:"
jq -r '.[] | "   üÜî \(.sessionId): \(.branch)"' docs/session-logs/current-sessions.json

# Check for uncommitted changes
if [ -n "$(git status --porcelain)" ]; then
    echo ""
    echo "‚ö†Ô∏è  –ù–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏ –≤ git:"
    git status --porcelain | head -10
    if [ $(git status --porcelain | wc -l) -gt 10 ]; then
        echo "   ... —Ç–∞ —â–µ $(( $(git status --porcelain | wc -l) - 10 )) —Ñ–∞–π–ª—ñ–≤"
    fi
fi

echo ""

# Recommendations
echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:"

# Check session activity
INACTIVE_SESSIONS=$(jq -r --arg time "$(date -u -d '2 hours ago' +%Y-%m-%dT%H:%M:%SZ)" \
    '.[] | select(.lastUpdate < $time and .status == "active") | .sessionId' \
    docs/session-logs/current-sessions.json)

if [ -n "$INACTIVE_SESSIONS" ]; then
    echo "   ‚è∞ –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó (>2 –≥–æ–¥–∏–Ω–∏):"
    echo "$INACTIVE_SESSIONS" | while read session; do
        echo "      üî∂ $session - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å"
    done
fi

# Check for high conflict sessions
HIGH_CONFLICT=$(jq -r '.[] | select(.conflictLevel == "HIGH") | .sessionId' docs/session-logs/current-sessions.json)
if [ -n "$HIGH_CONFLICT" ]; then
    echo "   üî¥ –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤:"
    echo "$HIGH_CONFLICT" | while read session; do
        echo "      ‚ö†Ô∏è  $session - –∞–∫—Ç–∏–≤–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è"
    done
fi

# General recommendations
echo "   üìã –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏:"
echo "      1. –û–Ω–æ–≤–ª—é–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É"
echo "      2. –ö–æ–º—ñ—Ç—å—Ç–µ –∑–º—ñ–Ω–∏ —á–∞—Å—Ç—ñ—à–µ"
echo "      3. –ö–æ–æ—Ä–¥–∏–Ω—É–π—Ç–µ—Å—è –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é —Å–ø—ñ–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"
echo "      4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ feature branches"

echo ""
echo "üîÑ –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: ./scripts/update-session-status.sh"
echo "üìñ –ü–æ–≤–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: docs/CLAUDE_SESSION_MANAGEMENT.md"