#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π –∑–±–∏—Ä–∞—á –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ YouTube —á–µ—Ä–µ–∑ API
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ –≤–±—É–¥–æ–≤–∞–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
"""

import json
import urllib.request
import urllib.parse
import os
from datetime import datetime

class SimpleYouTubeCollector:
    def __init__(self):
        self.api_key = os.getenv('YOUTUBE_API_KEY')
        if not self.api_key:
            raise ValueError("‚ùå YOUTUBE_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        
        self.base_url = "https://www.googleapis.com/youtube/v3"
        self.playlist_id = "PLNz8wZnk2_6WvkuOVxq-wubNOPGHYTfk3"
        self.comments_data = []
    
    def make_api_request(self, endpoint, params):
        """–†–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç –¥–æ YouTube API"""
        params['key'] = self.api_key
        url = f"{self.base_url}/{endpoint}?" + urllib.parse.urlencode(params)
        
        try:
            with urllib.request.urlopen(url) as response:
                return json.loads(response.read().decode())
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API: {e}")
            return None
    
    def get_playlist_videos(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        videos = []
        next_page_token = None
        
        while True:
            params = {
                'part': 'snippet',
                'playlistId': self.playlist_id,
                'maxResults': 50
            }
            
            if next_page_token:
                params['pageToken'] = next_page_token
            
            response = self.make_api_request('playlistItems', params)
            
            if not response:
                break
            
            for item in response.get('items', []):
                video_info = {
                    'video_id': item['snippet']['resourceId']['videoId'],
                    'title': item['snippet']['title'],
                    'published_at': item['snippet']['publishedAt']
                }
                videos.append(video_info)
                print(f"   üìπ {video_info['title']}")
            
            next_page_token = response.get('nextPageToken')
            if not next_page_token:
                break
        
        return videos
    
    def get_video_comments(self, video_id, video_title):
        """–û—Ç—Ä–∏–º—É—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è –≤—ñ–¥–µ–æ"""
        comments = []
        next_page_token = None
        
        while len(comments) < 100:  # –ú–∞–∫—Å–∏–º—É–º 100 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–∞ –≤—ñ–¥–µ–æ
            params = {
                'part': 'snippet',
                'videoId': video_id,
                'maxResults': 100,
                'order': 'relevance'
            }
            
            if next_page_token:
                params['pageToken'] = next_page_token
            
            response = self.make_api_request('commentThreads', params)
            
            if not response:
                break
            
            for item in response.get('items', []):
                comment_data = item['snippet']['topLevelComment']['snippet']
                
                comment = {
                    'author': comment_data['authorDisplayName'],
                    'text': comment_data['textDisplay'],
                    'published_at': comment_data['publishedAt'],
                    'like_count': comment_data['likeCount'],
                    'video_id': video_id,
                    'video_title': video_title,
                    'video_url': f"https://www.youtube.com/watch?v={video_id}"
                }
                
                comments.append(comment)
            
            next_page_token = response.get('nextPageToken')
            if not next_page_token:
                break
        
        return comments
    
    def classify_comment(self, comment):
        """–ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É"""
        text = comment['text'].lower()
        score = 0
        categories = []
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —Å–ª–æ–≤–∞
        positive_words = ['–¥—è–∫—É—é', '—Å–ø–∞—Å–∏–±–æ', 'thanks', '–∫–æ—Ä–∏—Å–Ω–æ', '—á—É–¥–æ–≤–æ', 
                         '–≤—ñ–¥–º—ñ–Ω–Ω–æ', '–Ω–∞–π–∫—Ä–∞—â', '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '–¥–æ–ø–æ–º–æ–≥–ª–æ']
        
        # –°–ª–æ–≤–∞-—Å–≤—ñ–¥—á–µ–Ω–Ω—è
        testimonial_words = ['–≤—Ä—è—Ç—É–≤–∞–≤', '–∂–∏—Ç—Ç—è', '–∑–∞–≤–¥—è–∫–∏', '—Ç–µ–ø–µ—Ä —è', 
                           '–Ω–∞–≤—á–∏–≤—Å—è', '–∑–º—ñ–≥', '–≤–¥–∞–ª–æ—Å—è']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
        for word in positive_words:
            if word in text:
                score += 3
                categories.append('positive')
                break
        
        for word in testimonial_words:
            if word in text:
                score += 5
                categories.append('testimonial')
                break
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –±–∞–ª–∏
        if len(text) > 100:
            score += 2
        if comment['like_count'] > 10:
            score += 2
        if comment['like_count'] > 50:
            score += 3
        
        return {
            'score': score,
            'quality': 'excellent' if score >= 8 else 'good' if score >= 5 else 'normal',
            'categories': categories,
            'is_marketing_worthy': score >= 5
        }
    
    def collect_all(self):
        """–ó–±–∏—Ä–∞—î –≤—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ"""
        print("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±—ñ—Ä –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤...")
        print(f"üìã –ü–ª–µ–π–ª–∏—Å—Ç: {self.playlist_id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–µ–æ
        print("\nüìπ –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ...")
        videos = self.get_playlist_videos()
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(videos)} –≤—ñ–¥–µ–æ")
        
        # –ó–±–∏—Ä–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        total_marketing_comments = 0
        
        for i, video in enumerate(videos[:5], 1):  # –û–±–º–µ–∂—É—î–º–æ 5 –≤—ñ–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç—É
            print(f"\nüé¨ –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ {i}/{min(len(videos), 5)}: {video['title'][:50]}...")
            
            comments = self.get_video_comments(video['video_id'], video['title'])
            print(f"   üí¨ –ó–Ω–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")
            
            # –ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î–º–æ
            marketing_worthy = 0
            for comment in comments:
                classification = self.classify_comment(comment)
                comment['classification'] = classification
                
                if classification['is_marketing_worthy']:
                    self.comments_data.append(comment)
                    marketing_worthy += 1
            
            print(f"   ‚ú® –í—ñ–¥—ñ–±—Ä–∞–Ω–æ {marketing_worthy} —è–∫—ñ—Å–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")
            total_marketing_comments += marketing_worthy
        
        print(f"\nüìä –í—Å—å–æ–≥–æ –∑—ñ–±—Ä–∞–Ω–æ {total_marketing_comments} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É")
    
    def save_results(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"""
        output_dir = "/Users/chyngys/scripts/neb-content-appv2/marketing_data"
        os.makedirs(output_dir, exist_ok=True)
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —è–∫—ñ—Å—Ç—é
        self.comments_data.sort(key=lambda x: x['classification']['score'], reverse=True)
        
        # JSON —Ñ–∞–π–ª
        json_file = os.path.join(output_dir, "youtube_comments_real.json")
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump({
                'collected_at': datetime.now().isoformat(),
                'playlist_id': self.playlist_id,
                'total_comments': len(self.comments_data),
                'comments': self.comments_data
            }, f, ensure_ascii=False, indent=2)
        
        # Markdown —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
        md_file = os.path.join(output_dir, "youtube_comments_best.md")
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write("# üåü –ù–∞–π–∫—Ä–∞—â—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É\n\n")
            f.write(f"*–ó—ñ–±—Ä–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}*\n\n")
            
            # –¢–æ–ø-10 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
            for i, comment in enumerate(self.comments_data[:10], 1):
                f.write(f"## {i}. {comment['author']}\n")
                f.write(f"*–í—ñ–¥–µ–æ: {comment['video_title']}*\n")
                f.write(f"*–î–∞—Ç–∞: {comment['published_at'][:10]} | üëç {comment['like_count']}*\n\n")
                f.write(f"> {comment['text']}\n\n")
                f.write("---\n\n")
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:")
        print(f"   üìÑ JSON: {json_file}")
        print(f"   üìù Markdown: {md_file}")

def main():
    try:
        collector = SimpleYouTubeCollector()
        collector.collect_all()
        collector.save_results()
        
    except ValueError as e:
        print(e)
        print("\nüìù –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
        print("   export YOUTUBE_API_KEY='–≤–∞—à_–∫–ª—é—á_—Ç—É—Ç'")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()