import { readFile, readdir } from 'fs/promises';
import path from 'path';
import matter from 'gray-matter';
import { Course, Section, Lesson, Prisma } from '@prisma/client';
import { prisma } from '@/lib/db/prisma';
import { slugify } from '@/lib/utils';

// KB_NEB vault path
const KB_NEB_VAULT_PATH = '/Users/chyngys/scripts/kb_neb/vault_output';

// Content type mappings
const CONTENT_TYPE_MAP = {
  'M-UA': 'MASTER_UA',
  'M-EN': 'MASTER_EN',
  'T-UA': 'THESIS_UA',
  'T-EN': 'THESIS_EN',
  'V-UA': 'VIDEO_UA',
  'V-EN': 'VIDEO_EN',
  'W-UA': 'WEB_UA',
  'W-EN': 'WEB_EN',
} as const;

interface KBNebContent {
  title: string;
  content: string;
  metadata: {
    knowledge_value?: number;
    is_cornerstone?: boolean;
    quality_evaluation?: number;
    theme_id?: string;
    format?: string;
    language?: string;
    readiness?: string;
    priority?: number;
  };
  filePath: string;
}

interface CourseStructure {
  title: string;
  description: string;
  modules: {
    title: string;
    description: string;
    items: {
      title: string;
      contentPath: string;
      order: number;
    }[];
  }[];
}

export class CourseService {
  /**
   * Read and parse KB_NEB content file
   */
  private async readKBNebFile(filePath: string): Promise<KBNebContent | null> {
    try {
      const fullPath = path.join(KB_NEB_VAULT_PATH, filePath);
      const fileContent = await readFile(fullPath, 'utf-8');
      
      // Try to parse frontmatter
      const { data: metadata, content } = matter(fileContent);
      
      // Extract title from first # heading or filename
      let title = metadata.title || '';
      if (!title) {
        const titleMatch = content.match(/^#\s+(.+)$/m);
        title = titleMatch ? titleMatch[1] : path.basename(filePath, '.md');
      }
      
      return {
        title,
        content,
        metadata,
        filePath
      };
    } catch (error) {
      console.error(`Error reading KB_NEB file ${filePath}:`, error);
      return null;
    }
  }

  /**
   * Get all content files from a directory
   */
  private async getContentFiles(dirPath: string): Promise<string[]> {
    const files: string[] = [];
    
    try {
      const fullDirPath = path.join(KB_NEB_VAULT_PATH, dirPath);
      const entries = await readdir(fullDirPath, { withFileTypes: true });
      
      for (const entry of entries) {
        const entryPath = path.join(dirPath, entry.name);
        
        if (entry.isDirectory()) {
          // Recursively get files from subdirectories
          const subFiles = await this.getContentFiles(entryPath);
          files.push(...subFiles);
        } else if (entry.name.endsWith('.md')) {
          files.push(entryPath);
        }
      }
    } catch (error) {
      console.error(`Error reading directory ${dirPath}:`, error);
    }
    
    return files;
  }

  /**
   * Get course structure based on course slug
   */
  private getCourseStructure(courseSlug: string): CourseStructure {
    switch(courseSlug) {
      case 'motorcycle-safety-concepts':
        return this.getSafetyConceptsCourse();
      case 'critical-riding-skills':
        return this.getCriticalSkillsCourse();
      case 'beginner-rider-guide':
        return this.getBeginnerGuideCourse();
      default:
        return this.getSafetyConceptsCourse(); // fallback
    }
  }

  /**
   * Course 1: "8 –∫–æ–Ω—Ü–µ–ø—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞"
   */
  private getSafetyConceptsCourse(): CourseStructure {
    return {
      title: "8 –∫–æ–Ω—Ü–µ–ø—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞",
      description: "–ü–æ–≤–Ω–∏–π –∫—É—Ä—Å –∑ 8 –∂–∏—Ç—Ç—î–≤–æ –≤–∞–∂–ª–∏–≤–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏, –∑–∞—Å–Ω–æ–≤–∞–Ω–∏—Ö –Ω–∞ –∞–Ω–∞–ª—ñ–∑—ñ —Ç–∏—Å—è—á —Ä–µ–∞–ª—å–Ω–∏—Ö –∞–≤–∞—Ä—ñ–π.",
      modules: [
        {
          title: "üéØ Module 1: 8 –∫–æ–Ω—Ü–µ–ø—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏",
          description: "üíÄ –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û! –¶—ñ –∫–æ–Ω—Ü–µ–ø—Ç–∏ - —Ä—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –∂–∏—Ç—Ç—è–º —ñ —Å–º–µ—Ä—Ç—é. 87% –∞–≤–∞—Ä—ñ–π –º–æ–∂–Ω–∞ —É–Ω–∏–∫–Ω—É—Ç–∏, –∑–Ω–∞—é—á–∏ —Ü—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏. –ö–æ–∂–µ–Ω –∫–æ–Ω—Ü–µ–ø—Ç –∑–∞—Å–Ω–æ–≤–∞–Ω–∏–π –Ω–∞ –∞–Ω–∞–ª—ñ–∑—ñ —Ä–µ–∞–ª—å–Ω–∏—Ö –î–¢–ü.",
          items: [
            {
              title: "Vision/Blocker - –ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ",
              contentPath: "Nebachiv/1 All Nebachiv Texts/02  6 Concepts/01 Vision/Vision concept  Blocker  ( M-UA ).md",
              order: 1
            },
            {
              title: "Responsibility - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å",
              contentPath: "Nebachiv/1 All Nebachiv Texts/02  6 Concepts/8 –∫–æ–Ω—Ü–µ–ø—Ç—ñ–≤ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞ ( M-EN ).md",
              order: 2
            },
            {
              title: "Concentration - –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –ø—ñ–¥ —á–∞—Å —Ä—É—Ö—É",
              contentPath: "Nebachiv/1 All Nebachiv Texts/02  6 Concepts/05 wavelike danger/Wave nature of danger ( M-UA ).md",
              order: 3
            },
            {
              title: "Space - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä–æ–º –Ω–∞–≤–∫–æ–ª–æ –º–æ—Ç–æ—Ü–∏–∫–ª–∞",
              contentPath: "Nebachiv/1 All Nebachiv Texts/02  6 Concepts/04 Space/Space concept ( M-UA ).md",
              order: 4
            },
            {
              title: "Speed - –†–æ–∑—É–º–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ",
              contentPath: "Nebachiv/1 All Nebachiv Texts/02  6 Concepts/03 Speed/Speed concept ( M-UA ).md",
              order: 5
            },
            {
              title: "Stability - –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –±–∞–ª–∞–Ω—Å",
              contentPath: "Nebachiv/1 All Nebachiv Texts/02  6 Concepts/02 Stability/Stability concept ( M-UA ).md",
              order: 6
            },
            {
              title: "Strategy - –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è –Ω–∞ –¥–æ—Ä–æ–∑—ñ",
              contentPath: "Nebachiv/1 All Nebachiv Texts/02  6 Concepts/06 Strategy/Strategy concept ( M-UA ).md",
              order: 7
            },
            {
              title: "Survival - –Ü–Ω—Å—Ç–∏–Ω–∫—Ç –≤–∏–∂–∏–≤–∞–Ω–Ω—è",
              contentPath: "Nebachiv/1 All Nebachiv Texts/02  6 Concepts/07 Survival/Survival concept ( M-UA ).md",
              order: 8
            }
          ]
        }
      ]
    };
  }

  /**
   * Course 2: "–ö—Ä–∏—Ç–∏—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞"
   */
  private getCriticalSkillsCourse(): CourseStructure {
    return {
      title: "–ö—Ä–∏—Ç–∏—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞",
      description: "–¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –≤–∏–∂–∏–≤–∞–Ω–Ω—è, —è–∫—ñ –ø–æ–≤–∏–Ω–µ–Ω –∑–Ω–∞—Ç–∏ –∫–æ–∂–µ–Ω –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç. –¶—ñ –Ω–∞–≤–∏—á–∫–∏ –≤—Ä—è—Ç—É–≤–∞–ª–∏ —Ç–∏—Å—è—á—ñ –∂–∏—Ç—Ç—ñ–≤.",
      modules: [
        {
          title: "‚ö° Module 1: –ï–∫—Å—Ç—Ä–µ–Ω–µ –≥–∞–ª—å–º—É–≤–∞–Ω–Ω—è",
          description: "üõë –ù–ê–í–ò–ß–ö–ê #1 –¥–ª—è –≤–∏–∂–∏–≤–∞–Ω–Ω—è! 90% –∞–≤–∞—Ä—ñ–π –º–æ–∂–Ω–∞ —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –≥–∞–ª—å–º—É–≤–∞–Ω–Ω—è–º. –í–∏–≤—á—ñ—Ç—å —Ç–µ—Ö–Ω—ñ–∫–∏, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –≥–æ–Ω—â–∏–∫–∏.",
          items: [
            {
              title: "–û—Å–Ω–æ–≤–∏ –µ–∫—Å—Ç—Ä–µ–Ω–æ–≥–æ –≥–∞–ª—å–º—É–≤–∞–Ω–Ω—è",
              contentPath: "Nebachiv/1 All Nebachiv Texts/09 Skillz/–ö—Ä–∏—Ç–∏—á–Ω—ñ –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Å–∫—ñ–ª–ª–∏  ( M-UA ).md",
              order: 1
            },
            {
              title: "–ì–∞–ª—å–º—É–≤–∞–Ω–Ω—è –Ω–∞ –º–æ–∫—Ä—ñ–π –¥–æ—Ä–æ–∑—ñ",
              contentPath: "Nebachiv/1 All Nebachiv Texts/05 City Scenarios/Rain & wet ( M-UA ).md",
              order: 2
            },
            {
              title: "ABS vs –∑–≤–∏—á–∞–π–Ω—ñ –≥–∞–ª—å–º–∞",
              contentPath: "Nebachiv/1 All Nebachiv Texts/09 Skillz/ABS vs Non-ABS techniques ( T-UA ).md",
              order: 3
            }
          ]
        },
        {
          title: "üéØ Module 2: –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–∞ –±–∞–ª–∞–Ω—Å",
          description: "ü§∏‚Äç‚ôÇÔ∏è –°–ï–ö–†–ï–¢–ò —Ä—ñ–≤–Ω–æ–≤–∞–≥–∏ —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –º–æ—Ç–æ—Ü–∏–∫–ª–∞ –≤ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö. –¶—ñ —Ç–µ—Ö–Ω—ñ–∫–∏ –≤—ñ–¥–æ–∫—Ä–µ–º–ª—é—é—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ –≤—ñ–¥ –∞–º–∞—Ç–æ—Ä—ñ–≤.",
          items: [
            {
              title: "–†–æ–±–æ—Ç–∞ —Ä—É–∫ —Ç–∞ –Ω—ñ–≥",
              contentPath: "Nebachiv/1 All Nebachiv Texts/09 Skillz/Hands & legz ( T-UA ) [ todo ].md",
              order: 1
            },
            {
              title: "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ –Ω–∏–∑—å–∫–∏—Ö —à–≤–∏–¥–∫–æ—Å—Ç—è—Ö",
              contentPath: "Nebachiv/1 All Nebachiv Texts/09 Skillz/Low speed maneuvers ( T-UA ).md",
              order: 2
            },
            {
              title: "–°—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—è –≤ –∑–∞–Ω–æ—Å—ñ",
              contentPath: "Nebachiv/1 All Nebachiv Texts/09 Skillz/Slide control ( T-UA ).md",
              order: 3
            }
          ]
        },
        {
          title: "üèÉ‚Äç‚ôÇÔ∏è Module 3: –£–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑—ñ—Ç–∫–Ω–µ–Ω—å",
          description: "üí® –û–°–¢–ê–ù–ù–Ü–ô —à–∞–Ω—Å –≤—Ä—è—Ç—É–≤–∞—Ç–∏—Å—è! –ö–æ–ª–∏ –≥–∞–ª—å–º—É–≤–∞–Ω–Ω—è –Ω–µ –¥–æ–ø–æ–º–∞–≥–∞—î - –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–Ω–∏–∫–∞—Ç–∏. –¢–µ—Ö–Ω—ñ–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ –º–∞–Ω–µ–≤—Ä—É–≤–∞–Ω–Ω—è.",
          items: [
            {
              title: "–®–≤–∏–¥–∫–∞ –∑–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º–∫—É",
              contentPath: "Nebachiv/1 All Nebachiv Texts/09 Skillz/Quick direction change ( T-UA ).md",
              order: 1
            },
            {
              title: "–ö–æ–Ω—Ç—Ä-—Ä—É–ª—å–æ–≤–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è",
              contentPath: "Nebachiv/1 All Nebachiv Texts/09 Skillz/Counter-steering mastery ( T-UA ).md",
              order: 2
            },
            {
              title: "–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –º–∞–Ω–µ–≤—Ä–∏",
              contentPath: "Nebachiv/1 All Nebachiv Texts/09 Skillz/Combined maneuvers ( T-UA ).md",
              order: 3
            }
          ]
        }
      ]
    };
  }

  /**
   * Course 3: "–ì—ñ–¥ –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞"
   */
  private getBeginnerGuideCourse(): CourseStructure {
    return {
      title: "–ü–æ–≤–Ω–∏–π –≥—ñ–¥ –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞",
      description: "–í—Å–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –Ω–æ–≤–∞—á–∫—É: –≤—ñ–¥ –≤–∏–±–æ—Ä—É –º–æ—Ç–æ—Ü–∏–∫–ª–∞ –¥–æ –ø–µ—Ä—à–∏—Ö –±–µ–∑–ø–µ—á–Ω–∏—Ö –ø–æ—ó–∑–¥–æ–∫. –£–Ω–∏–∫–Ω—ñ—Ç—å —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫!",
      modules: [
        {
          title: "üèçÔ∏è Module 1: –í–∏–±—ñ—Ä –ø–µ—Ä—à–æ–≥–æ –º–æ—Ç–æ—Ü–∏–∫–ª–∞",
          description: "üí∞ –ù–ï –≤–∏—Ç—Ä–∞—á–∞–π—Ç–µ –≥—Ä–æ—à—ñ –¥–∞—Ä–µ–º–Ω–æ! –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è, —è–∫–∏–π –º–æ—Ç–æ—Ü–∏–∫–ª –ù–ê–°–ü–†–ê–í–î–Ü –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—é. –ü–æ–º–∏–ª–∫–∏ —Ç—É—Ç –∫–æ—à—Ç—É—é—Ç—å —Ç–∏—Å—è—á—ñ –¥–æ–ª–∞—Ä—ñ–≤.",
          items: [
            {
              title: "–¢–∏–ø–∏ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ–≤ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/02 First Mot/–í–∏–±—ñ—Ä –ø–µ—Ä—à–æ–≥–æ –º–æ—Ç–æ—Ü–∏–∫–ª–∞ ( M-UA ).md",
              order: 1
            },
            {
              title: "–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å vs –¥–æ—Å–≤—ñ–¥",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/02 First Mot/Power vs Experience ( T-UA ).md",
              order: 2
            },
            {
              title: "–ë/—É vs –Ω–æ–≤–∏–π –º–æ—Ç–æ—Ü–∏–∫–ª",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/02 First Mot/Used vs New bike ( T-UA ).md",
              order: 3
            }
          ]
        },
        {
          title: "üõ°Ô∏è Module 2: –ï–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞—Ö–∏—Å—Ç",
          description: "‚ö∞Ô∏è –í–∞—à–µ –∂–∏—Ç—Ç—è –ó–ê–õ–ï–ñ–ò–¢–¨ –≤—ñ–¥ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è! –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –∑–∞—Ö–∏—â–∞—î, –∞ —â–æ - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏–π –æ–±–º–∞–Ω.",
          items: [
            {
              title: "–§—ñ–ª–æ—Å–æ—Ñ—ñ—è –≤–∏–±–æ—Ä—É –µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/01 Equip/Equip v2  ( M-UA ) [ doing ].md",
              order: 1
            },
            {
              title: "–®–æ–ª–æ–º: –≤–∏–±—ñ—Ä —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∏",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/01 Equip/Helmet selection ( T-UA ).md",
              order: 2
            },
            {
              title: "–ó–∞—Ö–∏—Å–Ω–µ –≤–∑—É—Ç—Ç—è —Ç–∞ —Ä—É–∫–∞–≤–∏—á–∫–∏",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/01 Equip/Protective gear ( T-UA ).md",
              order: 3
            },
            {
              title: "–ö—É—Ä—Ç–∫–∞ —Ç–∞ —à—Ç–∞–Ω–∏",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/01 Equip/Jacket and pants ( T-UA ).md",
              order: 4
            }
          ]
        },
        {
          title: "üöÄ Module 3: –ü–µ—Ä—à—ñ –∫—Ä–æ–∫–∏ –Ω–∞ –¥–æ—Ä–æ–∑—ñ",
          description: "üéØ –í—ñ–¥ –º–æ—Ç–æ—à–∫–æ–ª–∏ –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ—ñ–∫—É. –Ø–∫ –ù–ï —Å—Ç–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –≤ –ø–µ—Ä—à—ñ –º—ñ—Å—è—Ü—ñ —ó–∑–¥–∏. –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ!",
          items: [
            {
              title: "–ü–µ—Ä—à—ñ –Ω–∞–≤–∏—á–∫–∏ –º–æ—Ç–æ—Ü–∏–∫–ª—ñ—Å—Ç–∞",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/–ü–µ—Ä—à—ñ —Å–∫—ñ–ª–ª–∏ ( M-UA ) [ doing ].md",
              order: 1
            },
            {
              title: "–¢–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏ –Ω–æ–≤–∞—á–∫—ñ–≤",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/Common beginner mistakes ( T-UA ).md",
              order: 2
            },
            {
              title: "–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö –ø–æ—ó–∑–¥–æ–∫",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/First rides planning ( T-UA ).md",
              order: 3
            },
            {
              title: "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è –Ω–æ–≤–∞—á–∫–∞",
              contentPath: "Nebachiv/1 All Nebachiv Texts/04 Novice.  First Mot  First Equip/Beginner psychology ( T-UA ).md",
              order: 4
            }
          ]
        }
      ]
    };
  }

  /**
   * Generate or update a course from KB_NEB content
   */
  async generateCourse(courseSlug: string = 'motorcycle-safety-concepts'): Promise<Course> {
    const courseStructure = this.getCourseStructure(courseSlug);
    
    // Check if course exists
    let course = await prisma.course.findUnique({
      where: { slug: courseSlug },
      include: {
        sections: {
          include: {
            items: true
          }
        }
      }
    });

    // Create or update course
    if (!course) {
      course = await prisma.course.create({
        data: {
          slug: courseSlug,
          difficulty: 'BEGINNER',
          isPremium: false,
          isPublished: true,
          price: 0, // Free for test course
        },
        include: {
          sections: {
            include: {
              items: true
            }
          }
        }
      });
    }

    // Process each module
    for (let moduleIndex = 0; moduleIndex < courseStructure.modules.length; moduleIndex++) {
      const module = courseStructure.modules[moduleIndex];
      
      // Create or update section
      let section = course.sections.find(s => s.order === moduleIndex + 1);
      
      if (!section) {
        section = await prisma.courseSection.create({
          data: {
            courseId: course.id,
            title: module.title,
            description: module.description,
            order: moduleIndex + 1
          },
          include: {
            items: true
          }
        });
      }

      // Process each lesson
      for (const lessonData of module.items) {
        // Read content from KB_NEB
        const content = await this.readKBNebFile(lessonData.contentPath);
        
        if (!content) {
          console.warn(`Could not read content for lesson: ${lessonData.title}`);
          continue;
        }

        // Check if lesson exists
        let lesson = section.items.find(l => l.order === lessonData.order);
        
        if (!lesson) {
          // First create Content
          const contentRecord = await prisma.content.create({
            data: {
              slug: slugify(`${lessonData.title}-${Date.now()}-${lessonData.order}`),
              type: 'LESSON',
              format: content.metadata.format || 'markdown',
              status: 'PUBLISHED',
              isPublished: true,
              isPremium: false,
              difficulty: 'BEGINNER',
              estimatedTime: 15,
              kbNebMetadata: JSON.stringify({
                sourceFile: lessonData.contentPath,
                title: lessonData.title,
                content: content.content,
                originalMetadata: content.metadata
              })
            }
          });
          
          // Then create CourseSectionItem linking to Content
          await prisma.courseSectionItem.create({
            data: {
              sectionId: section.id,
              contentId: contentRecord.id,
              order: lessonData.order,
              isRequired: true
            }
          });
        } else {
          // Update existing content
          await prisma.content.update({
            where: { id: lesson.contentId },
            data: {
              format: content.metadata.format || 'markdown',
              kbNebMetadata: JSON.stringify({
                sourceFile: lessonData.contentPath,
                title: lessonData.title,
                content: content.content,
                originalMetadata: content.metadata,
                lastUpdated: new Date().toISOString()
              })
            }
          });
        }
      }
    }

    // Return updated course
    return await prisma.course.findUnique({
      where: { id: course.id },
      include: {
        sections: {
          include: {
            items: {
              orderBy: { order: 'asc' }
            }
          },
          orderBy: { order: 'asc' }
        }
      }
    }) as Course;
  }

  /**
   * Get course with full content
   */
  async getCourseWithContent(courseSlug: string) {
    return await prisma.course.findUnique({
      where: { slug: courseSlug },
      include: {
        sections: {
          include: {
            items: {
              orderBy: { order: 'asc' }
            }
          },
          orderBy: { order: 'asc' }
        }
      }
    });
  }

  /**
   * Scan KB_NEB for available content
   */
  async scanAvailableContent() {
    const contentMap = new Map<string, KBNebContent[]>();
    
    // Key directories to scan
    const directories = [
      'Nebachiv/1 All Nebachiv Texts/02 6 Concepts',
      'Nebachiv/1 All Nebachiv Texts/04 Novice',
      'Nebachiv/1 All Nebachiv Texts/05 City Scenarios',
      'Nebachiv/1 All Nebachiv Texts/09 Skillz'
    ];

    for (const dir of directories) {
      const files = await this.getContentFiles(dir);
      const contents: KBNebContent[] = [];
      
      for (const file of files) {
        const content = await this.readKBNebFile(file);
        if (content) {
          contents.push(content);
        }
      }
      
      contentMap.set(dir, contents);
    }

    return contentMap;
  }

  /**
   * Generate quiz questions from lesson content
   */
  async generateQuizQuestions(lessonId: string) {
    const lesson = await prisma.lesson.findUnique({
      where: { id: lessonId }
    });

    if (!lesson) {
      throw new Error('Lesson not found');
    }

    // This is a placeholder for quiz generation logic
    // In a real implementation, this could use AI or predefined question templates
    const questions = [
      {
        question: `–©–æ —î –æ—Å–Ω–æ–≤–Ω–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–º –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó "${lesson.title}"?`,
        type: 'SINGLE_CHOICE',
        options: [
          '–í–∞—Ä—ñ–∞–Ω—Ç –ê',
          '–í–∞—Ä—ñ–∞–Ω—Ç –ë', 
          '–í–∞—Ä—ñ–∞–Ω—Ç –í',
          '–í–∞—Ä—ñ–∞–Ω—Ç –ì'
        ],
        correctAnswer: 0,
        explanation: '–ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...'
      }
    ];

    return questions;
  }
}

// Export singleton instance
export const courseService = new CourseService();