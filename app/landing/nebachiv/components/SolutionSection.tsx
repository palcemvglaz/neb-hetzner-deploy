'use client';

import valueProp from '../assets/copy/value-props.json';

interface SolutionSectionProps {
  version: 'ukrainian' | 'hormozi';
}

export default function SolutionSection({ version }: SolutionSectionProps) {
  const mechanisms = valueProp.unique_mechanisms[version === 'ukrainian' ? 'ukrainian' : 'hormozi'];
  const transformation = valueProp.core_transformation;

  return (
    <section className="py-20 px-4 bg-gray-800">
      <div className="max-w-6xl mx-auto">
        {/* Section header */}
        <div className="text-center mb-16">
          <h2 className={`text-3xl md:text-5xl font-bold text-white mb-6`}>
            {version === 'hormozi'
              ? '–°–ò–°–¢–ï–ú–ê –ù–ï–í–ë–ò–í–ù–û–°–¢–Ü –ù–ï–ë–ê–ß–Ü–í–ê'
              : 'Nebachiv: –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –ø—ñ—Å–ª—è –º–æ—Ç–æ—à–∫–æ–ª–∏'
            }
          </h2>
          <p className="text-xl text-gray-300 max-w-4xl mx-auto">
            {version === 'hormozi'
              ? '–Ø –ø–µ—Ä–µ—Ç–≤–æ—Ä—é —Ç–µ–±–µ –∑ –ñ–ï–†–¢–í–ò –¥–æ—Ä–æ–≥–∏ –≤ –•–ò–ñ–ê–ö–ê, —è–∫–∏–π –ü–û–õ–Æ–Ñ –Ω–∞ –∑–∞–≥—Ä–æ–∑–∏ –∑–∞–º—ñ—Å—Ç—å —Ç–æ–≥–æ —â–æ–± —Å—Ç–∞—Ç–∏ —ó—Ö –∂–µ—Ä—Ç–≤–æ—é'
              : '–ú–æ—Ç–æ—à–∫–æ–ª–∞ –Ω–∞–≤—á–∏–ª–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –º–æ—Ç–æ—Ü–∏–∫–ª–æ–º. Nebachiv –Ω–∞–≤—á–∏—Ç—å —è–∫ —Ç–µ–±–µ –Ω–∞–º–∞–≥–∞—Ç–∏–º—É—Ç—å—Å—è –∑–±–∏—Ç–∏ —ñ —è–∫ —Ü—å–æ–≥–æ —É–Ω–∏–∫–Ω—É—Ç–∏'
            }
          </p>
        </div>

        {/* Transformation visual */}
        <div className="grid md:grid-cols-2 gap-12 mb-16">
          {/* Before */}
          <div className={`p-8 rounded-lg ${
            version === 'hormozi' 
              ? 'bg-nebachiv-orange/20 border-2 border-nebachiv-orange' 
              : 'bg-gray-900'
          }`}>
            <h3 className="text-2xl font-bold text-white mb-6 text-center">
              {transformation.from.title}
            </h3>
            <ul className="space-y-3">
              {transformation.from.traits.map((trait, index) => (
                <li key={index} className="flex items-start space-x-3">
                  <span className="text-nebachiv-orange mt-1">‚ùå</span>
                  <span className="text-gray-300">{trait}</span>
                </li>
              ))}
            </ul>
          </div>

          {/* After */}
          <div className={`p-8 rounded-lg ${
            version === 'hormozi'
              ? 'bg-green-900 border-2 border-nebachiv-blue/200'
              : 'bg-gray-900 border border-nebachiv-blue/200'
          }`}>
            <h3 className="text-2xl font-bold text-white mb-6 text-center">
              {transformation.to.title}
            </h3>
            <ul className="space-y-3">
              {transformation.to.traits.map((trait, index) => (
                <li key={index} className="flex items-start space-x-3">
                  <span className="text-nebachiv-blue/200 mt-1">‚úÖ</span>
                  <span className="text-gray-300">{trait}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Unique mechanisms */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
          {mechanisms.map((mechanism, index) => (
            <div 
              key={index}
              className={`p-6 rounded-lg text-center ${
                version === 'hormozi'
                  ? 'bg-gray-900 border border-nebachiv-orange'
                  : 'bg-gray-900'
              }`}
            >
              <div className="text-4xl mb-4">
                {getIconEmoji(mechanism.icon)}
              </div>
              <h4 className={`text-lg font-bold text-white mb-3 ${
                version === 'hormozi' ? 'text-nebachiv-orange' : ''
              }`}>
                {mechanism.title}
              </h4>
              <p className="text-gray-300 text-sm">
                {mechanism.description}
              </p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

function getIconEmoji(icon: string): string {
  switch (icon) {
    case 'database': return 'üóÑÔ∏è';
    case 'shield': return 'üõ°Ô∏è';
    case 'map': return 'üó∫Ô∏è';
    case 'users': return 'üë•';
    case 'eye': return 'üëÅÔ∏è';
    case 'skull': return 'üíÄ';
    case 'target': return 'üéØ';
    case 'guarantee': return '‚úÖ';
    default: return '‚ö°';
  }
}